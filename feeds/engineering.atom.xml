<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Peter Bouda - Engineering</title><link href="https://www.peterbouda.eu/" rel="alternate"></link><link href="https://www.peterbouda.eu/feeds/engineering.atom.xml" rel="self"></link><id>https://www.peterbouda.eu/</id><updated>2025-10-09T09:28:00+01:00</updated><subtitle>Natural Language Processing Consultant</subtitle><entry><title>Using Claude Code for clean architecture</title><link href="https://www.peterbouda.eu/using-claude-code-for-clean-architecture.html" rel="alternate"></link><published>2025-10-09T09:28:00+01:00</published><updated>2025-10-09T09:28:00+01:00</updated><author><name>Peter Bouda</name></author><id>tag:www.peterbouda.eu,2025-10-09:/using-claude-code-for-clean-architecture.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been using Claude Code to build a Go &lt;span class="caps"&gt;API&lt;/span&gt; with hexagonal architecture, and I&amp;#8217;m genuinely impressed. The workflow is smooth: I maintain a &lt;span class="caps"&gt;CLAUDE&lt;/span&gt;.md file with my architecture decisions, add documentation about database models, and then just prompt Claude to implement new&amp;nbsp;endpoints.&lt;/p&gt;
&lt;p&gt;Example prompt: &lt;em&gt;&amp;#8220;Add …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been using Claude Code to build a Go &lt;span class="caps"&gt;API&lt;/span&gt; with hexagonal architecture, and I&amp;#8217;m genuinely impressed. The workflow is smooth: I maintain a &lt;span class="caps"&gt;CLAUDE&lt;/span&gt;.md file with my architecture decisions, add documentation about database models, and then just prompt Claude to implement new&amp;nbsp;endpoints.&lt;/p&gt;
&lt;p&gt;Example prompt: &lt;em&gt;&amp;#8220;Add an endpoint to create a new project. You can find information about the database models in plans/database_models.md. For now we only want one more &lt;span class="caps"&gt;POST&lt;/span&gt; endpoint /api/projects that reveives a {&amp;#8220;name&amp;#8221;: &amp;#8220;Project name&amp;#8221;} &lt;span class="caps"&gt;JSON&lt;/span&gt;. The owner will be the currently logged in user. The training dataset and finetune are empty. The status is &lt;span class="caps"&gt;ACTIVE&lt;/span&gt;&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Claude Code respects the architecture patterns, follows the established conventions, and produces clean, testable code. Less context-switching between &lt;span class="caps"&gt;IDE&lt;/span&gt; and chat&amp;nbsp;interface.&lt;/p&gt;
&lt;p&gt;The full &lt;span class="caps"&gt;CLAUDE&lt;/span&gt;.md template is here if you want to try this approach: &lt;a href="github.com/pbouda/claude-code-prompts/blob/main/CLAUDE_go_api_architecture.md"&gt;github.com/pbouda/claude-code-prompts/blob/main/CLAUDE_go_api_architecture.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is what good developer tooling looks like - it understands your codebase and amplifies your architecture decisions rather than fighting them. For me it brought back a lot of joy in developing new&amp;nbsp;software!&lt;/p&gt;</content><category term="Engineering"></category><category term="Engineering"></category></entry></feed>
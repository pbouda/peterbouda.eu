<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Peter Bouda - Graphics</title><link href="http://www.peterbouda.eu/" rel="alternate"></link><link href="http://www.peterbouda.eu/feeds/graphics.atom.xml" rel="self"></link><id>http://www.peterbouda.eu/</id><updated>2015-01-30T11:00:00+00:00</updated><subtitle>Natural Language Processing Consultant</subtitle><entry><title>Update für die OpenGL-Renderschleife in PyQt</title><link href="http://www.peterbouda.eu/update-fur-die-opengl-renderschleife-in-pyqt.html" rel="alternate"></link><published>2015-01-30T11:00:00+00:00</published><updated>2015-01-30T11:00:00+00:00</updated><author><name>Peter Bouda</name></author><id>tag:www.peterbouda.eu,2015-01-30:/update-fur-die-opengl-renderschleife-in-pyqt.html</id><summary type="html">&lt;p&gt;Ich versuche gerade mich in das Thema Raytraching bzw. Raymarching einzuarbeiten. Dabei bin wieder auf mein Qt-OpenGL-Programmgerüst zurückgekommen, dass ich in &lt;a class="reference external" href="http://www.peterbouda.eu/revisiting-pyqt-and-opengl.html"&gt;einem meiner letzten Artikel&lt;/a&gt; beschrieben habe. Leider hat das Skript nicht auf Anhieb auf einem neuen Rechner funktioniert, was ich auf unterschiedliche Implementierungen der OpenGL-Bibliothek in Qt oder gar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ich versuche gerade mich in das Thema Raytraching bzw. Raymarching einzuarbeiten. Dabei bin wieder auf mein Qt-OpenGL-Programmgerüst zurückgekommen, dass ich in &lt;a class="reference external" href="http://www.peterbouda.eu/revisiting-pyqt-and-opengl.html"&gt;einem meiner letzten Artikel&lt;/a&gt; beschrieben habe. Leider hat das Skript nicht auf Anhieb auf einem neuen Rechner funktioniert, was ich auf unterschiedliche Implementierungen der OpenGL-Bibliothek in Qt oder gar den Grafiktreiber zurückführe. Bestimme von mir verwendete Befehle erzeugten Fehlermeldungen, u.a. konnte ich das OpenGL-Viereck für das Fraktal nicht per &lt;tt class="docutils literal"&gt;QL_QUADS&lt;/tt&gt; zeichnen. Ich habe also das Programmgerüst etwas angepasst und auf reine OpenGL &lt;span class="caps"&gt;ES&lt;/span&gt; 2.0 Befehle reduziert. Statt einem Viereck zeichne ich jetzt zwei Dreiecke, die ich per &lt;em&gt;Vertex Array&lt;/em&gt; übergebe. Ich benutze dafür die Methode &lt;tt class="docutils literal"&gt;glDrawElements()&lt;/tt&gt;, der ich die Indizes auf die einzelnen Dreickspunkte im &lt;em&gt;Vertex Array&lt;/em&gt; übergebe. Die &lt;tt class="docutils literal"&gt;render&lt;/tt&gt;-Schleife sieht jetzt in etwa folgendermaßen&amp;nbsp;aus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glViewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glClear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vAttr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vAttr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glDrawElements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_TRIANGLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_UNSIGNED_BYTE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glDisableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vAttr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Diese Gerüst eignet sich damit auch hervorragend für erste Raymarching-Experimente, da letztendlich wiederum nur ein simples Viereck mit den Eckpunkten &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[-1,&lt;/span&gt; &lt;span class="pre"&gt;-1]&lt;/span&gt;&lt;/tt&gt; und &lt;tt class="docutils literal"&gt;[1, 1]&lt;/tt&gt; gezeichnet wird. In dieses hinein lassen sich dann per Shader Fraktale oder eben Raytracing-Objekte zeichen. Allgemein scheint PyQt eine schöne Umgebung für Shader-Experimente zu sein, wie ich immer wieder festestellen muss. Mit dem Programmgerüst kann man schnell die Shader sowie deren Input und Output modifizieren. Der Screenshot oben basiert auf den Shadern des &lt;a class="reference external" href="http://www.iquilezles.org/www/material/isystem1k4k/isystem1k4k.htm"&gt;4k-Intro-Frameworks von iquilezles.org&lt;/a&gt;, eine fantastische Website zum Thema Grafikprogrammierung und &lt;a class="reference external" href="http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm"&gt;interessanten Artikeln zum Thema Raymarching&lt;/a&gt;. Hier ist noch der Link zu meinem aktuellen Experiment, das die oben abgebildete Kugel rendert, und das die OpenGL-Renderschleife in Aktion&amp;nbsp;zeigt:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pbouda/stuff/blob/master/opengl/pyqt/raymarching.py"&gt;https://github.com/pbouda/stuff/blob/master/opengl/pyqt/raymarching.py&lt;/a&gt;&lt;/p&gt;
</content><category term="Graphics"></category><category term="PyQt"></category><category term="OpenGL"></category><category term="Raymarching"></category></entry><entry><title>Revisiting PyQt and OpenGL</title><link href="http://www.peterbouda.eu/revisiting-pyqt-and-opengl.html" rel="alternate"></link><published>2014-07-23T10:00:00+01:00</published><updated>2014-07-23T10:00:00+01:00</updated><author><name>Peter Bouda</name></author><id>tag:www.peterbouda.eu,2014-07-23:/revisiting-pyqt-and-opengl.html</id><summary type="html">&lt;p&gt;It&amp;#8217;s been I while since I used OpenGL with PyQt, for example in my &lt;a class="reference external" href="http://www.peterbouda.eu/live-coding-glsl-shaders-with-ipython.html"&gt;live coding experiments with &lt;span class="caps"&gt;GLSL&lt;/span&gt; shaders&lt;/a&gt;. Those were still done with PyQt4 and the good old &lt;tt class="docutils literal"&gt;QGLWidget&lt;/tt&gt;. In Qt5 the preferred way to render in OpenGL canvases is to use the new &lt;tt class="docutils literal"&gt;QOpenGL*&lt;/tt&gt; classes. Those …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been I while since I used OpenGL with PyQt, for example in my &lt;a class="reference external" href="http://www.peterbouda.eu/live-coding-glsl-shaders-with-ipython.html"&gt;live coding experiments with &lt;span class="caps"&gt;GLSL&lt;/span&gt; shaders&lt;/a&gt;. Those were still done with PyQt4 and the good old &lt;tt class="docutils literal"&gt;QGLWidget&lt;/tt&gt;. In Qt5 the preferred way to render in OpenGL canvases is to use the new &lt;tt class="docutils literal"&gt;QOpenGL*&lt;/tt&gt; classes. Those have the advantage that they provide a full collection of OpenGL drawing functions, so it is not necessary to import any external OpenGL library (like PyOpenGL) anymore. The disadvantage is that there is currently no convenient way to create and initialize such a window with a nice render function, as was provided by the &lt;tt class="docutils literal"&gt;QGLWidget&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I finally collected some code from the PyQt5 OpenGL examples and with some modification I was able to run it (&lt;a class="reference external" href="https://github.com/baoboa/pyqt5/blob/master/examples/opengl/openglwindow.py"&gt;from the snapshot of PyQt5 on Github&lt;/a&gt;). Their class &lt;tt class="docutils literal"&gt;OpenGLWindow&lt;/tt&gt; provides what you need for the first steps, you can just subclass it and add your code to your own &lt;tt class="docutils literal"&gt;render()&lt;/tt&gt; function. I added some more interesting shaders from &lt;a class="reference external" href="http://www.iquilezles.org/www/material/nvscene2008/rwwtt.pdf"&gt;here&lt;/a&gt;, et voilà le&amp;nbsp;chocolat:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pbouda/stuff/blob/master/opengl/pyqt/chocolux.py"&gt;https://github.com/pbouda/stuff/blob/master/opengl/pyqt/chocolux.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Time to connect this with some live&amp;nbsp;coding&amp;#8230;&lt;/p&gt;
</content><category term="Graphics"></category><category term="PyQt"></category><category term="OpenGL"></category></entry></feed>